[
   {
      "slno":"0",
      "topic":"Introduction",
      "description":"",
      "longDescription":"Git is a version-control system for tracking changes in computer files and coordinating work on those files among multiple people. Git is a Distributed Version Control System. So Git does not necessarily rely on a central server to store all the versions of a projectâ€™s files.",
      "url":"",
      "image":""
   },
   {
      "slno":"1",
      "topic":"Setup and Config",
      "description":"",
      "longDescription":"# View global configuration list <BR> git config --global -l <BR> # View local configuration list <BR> git config --local -l <BR>  <BR> # View all configurations and the files they are in <BR> git config --list --show-origin <BR>  <BR> # View the set global username/email <BR> git config --global --get user.name <BR> git config --global --get user.email <BR>  <BR> # Set global username/email <BR> git config --global user.name 'userid' <BR> git config --global user.email 'example@example.com' <BR>  <BR> # Set the user name/email of the local current workspace warehouse <BR> git config --local user.name 'userid' <BR> git config --local user.email 'example@example.com <BR>  <BR> # delete configuration <BR> git config --unset --global user.name <BR> git config --unset --global user.email <BR> # Modify the default text editor, such as nano <BR> # Common editors: emacs / nano / vim / vi <BR> git config --global core.editor nano <BR>  <BR> # Set the default differential analysis tool to vimdiff <BR> git config --global merge.tool vimdiff <BR>  <BR> # Edit the current repository configuration file <BR> git config -e # Equivalent to vi .git/config <BR>  <BR> # Changes in file permissions will also be considered changes, and file permission changes can be ignored through the following configuration <BR> git config core.fileMode false <BR>  <BR> # File case is set to be sensitive, git ignores case by default <BR> git config --global core.ignorecase false <BR>  <BR> # When configuring git pull, all submodule contents are pulled by default <BR> git config submodule.recurse true <BR>  <BR> # Remember to submit the account password, the account password can be waived for the next operation <BR> git config --global credential.helper store # permanent <BR> git config --global credential.helper cache # Temporary, default 15 minutes <BR> ",
      "url":"",
      "image":""
   },
   {
      "slno":"1.01",
      "topic":"git",
      "description":"",
      "longDescription":"git --version",
      "url":"",
      "image":""
   },
   {
      "slno":"1.02",
      "topic":"config",
      "description":"",
      "longDescription":"# 1. Global configuration<BR>git config --global alias.lg log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C( bold blue)<%an>%Creset' --abbrev-commit <BR># 2. Enter the following command, the log becomes very intuitive<BR>git lg<BR><BR># There are several other modes here, you can choose the one you like for alias configuration<BR>git config --global alias.lg log --graph --pretty=format:'%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow) <%cr>%Creset' --abbrev-commit --date=relative <BR><BR>git config --global alias.his log --graph --decorate --oneline --pretty=format:'%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen% cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'<BR><BR>git config --global alias.hist log --graph --decorate --oneline --pretty=format:'%Cred%h - %C(bold white) %s %Creset %C(yellow)%d %C (cyan) <%cd> %Creset %Cgreen(%cn)' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'",
      "url":"",
      "image":""
   },
   {
      "slno":"1.03",
      "topic":"help",
      "description":"",
      "longDescription":"# print all git commands in detail<BR>git help<BR><BR># Print all git commands, this command will not have detailed information, it is more clear<BR>git help -a<BR><BR># List all configurable variables<BR>git help -c",
      "url":"",
      "image":""
   },
   {
      "slno":"1.04",
      "topic":"bugreport",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"1.05",
      "topic":"alias",
      "description":"",
      "longDescription":"# git st is equivalent to git status <BR> git config --global alias.st status <BR>  <BR> # If added before, you need to add --replace-all to override <BR> git config --global --replace-all alias.st status <BR>  <BR> # To execute external commands, just add ! in front <BR> git config --global alias.st '!echo hello'; <BR> # Add '!' to execute an external command to execute a complex process of merging code, for example: <BR> git config --global alias.mg '!git checkout develop && git pull && git merge master && git checkout -'; <BR>  <BR> # remove the st alias <BR> git config --global --unset alias.st <BR> ",
      "url":"",
      "image":""
   },
   {
      "slno":"1.06",
      "topic":"proxy",
      "description":"",
      "longDescription":"# set up<BR>git config --global https.proxy http://127.0.0.1:1087<BR>git config --global http.proxy http://127.0.0.1:1087<BR><BR># Check<BR>git config --global --get http.proxy<BR>git config --global --get https.proxy<BR><BR># cancel proxy<BR>git config --global --unset http.proxy<BR>git config --global --unset https.proxy",
      "url":"",
      "image":""
   },
   {
      "slno":"1.07",
      "topic":"Initialize",
      "description":"",
      "longDescription":"# will generate .git in the current directory<BR>git init<BR><BR># Create in quiet mode, only print errors or warnings<BR>git init -q<BR><BR># Create a bare repository in the current directory with only all files under .git<BR>git init --bare",
      "url":"",
      "image":""
   },
   {
      "slno":"1.08",
      "topic":"Initialize",
      "description":"",
      "longDescription":"# will generate .git in the current directory<BR>git init<BR><BR># Create in quiet mode, only print errors or warnings<BR>git init -q<BR><BR># Create a bare repository in the current directory with only all files under .git<BR>git init --bare",
      "url":"",
      "image":""
   },
   {
      "slno":"2",
      "topic":"Getting and Creating Projects",
      "description":"",
      "longDescription":"git init <br> or <br> git clone &ltssh or https url of repo&gt",
      "url":"",
      "image":""
   },
   {
      "slno":"2.01",
      "topic":"init",
      "description":"",
      "longDescription":"# will generate .git in the current directory<BR>git init<BR><BR># Create in quiet mode, only print errors or warnings<BR>git init -q<BR><BR># Create a bare repository in the current directory with only all files under .git<BR>git init --bare",
      "url":"",
      "image":""
   },
   {
      "slno":"2.02",
      "topic":"clone",
      "description":"",
      "longDescription":"# https protocol clone<BR>git clone https://github.com/userid/git-manual.git<BR><BR># SSH protocol clone<BR>git clone git@github.com:userid/git-manual.git<BR><BR># Clone the specified branch, -b specifies the branch name, which actually clones all branches and switches to the develop branch<BR>git clone -b develop https://github.com/userid/git-manual.git<BR><BR># --single-branch clone only the specified branch completely<BR>git clone -b develop --single-branch https://github.com/userid/git-manual.git<BR><BR># Specify the cloned folder name<BR>git clone https://github.com/userid/git-manual.git git-study # If followed by . Create in the current directory<BR><BR># Recursive clone, useful if the project contains submodules<BR>git clone --recursive https://github.com/userid/git-manual.git<BR><BR># Shallow clone, the clone depth is 1, only the specified branch is cloned and only the last record is kept, usually used to reduce the clone time and project size<BR>git clone --depth=1 https://github.com/userid/git-manual.git<BR>git clone --depth=1 --no-single-branch https://github.com/userid/git-manual.git # --no-single-branch also clones all other branches<BR><BR><BR># Bare clone, no workspace content, cannot be submitted for modification, generally used to copy warehouses<BR>git clone --bare https://github.com/userid/git-manual.git<BR><BR># Mirror clone, which is also a bare clone, is different from including the upstream repository registration<BR>git clone --mirror https://github.com/userid/git-manual.",
      "url":"",
      "image":""
   },
   {
      "slno":"3",
      "topic":"Basic Snapshotting",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"3.01",
      "topic":"add",
      "description":"",
      "longDescription":"# staging all<BR>git add -A<BR><BR># Staging a file<BR>git add ./README.md<BR><BR># Temporarily store all changed files in the current directory<BR>git add .<BR><BR># Staging a series of files<BR>git add 1.txt 2.txt ...",
      "url":"",
      "image":""
   },
   {
      "slno":"3.02",
      "topic":"status",
      "description":"",
      "longDescription":"check current status of git staging(staged, modified, commited,) <br> git status",
      "url":"",
      "image":""
   },
   {
      "slno":"3.03",
      "topic":"diff",
      "description":"",
      "longDescription":" check diff of changed files <br>git diff",
      "url":"",
      "image":""
   },
   {
      "slno":"3.04",
      "topic":"commit",
      "description":"",
      "longDescription":"# -m Submitted description information<BR>git commit -m 'changes log'<BR><BR># commit only a certain file<BR>git commit README.md -m 'message'<BR><BR># Commit and show diff changes<BR>git commit -v<BR><BR># Allows to submit empty messages, usually the -m parameter must be specified<BR>git commit --allow-empty-message<BR><BR># Rewrite the last commit information to ensure that the current workspace has not changed<BR>git commit --amend -m 'new commit info'<BR><BR># Skip validation if tools like husky are used.<BR>git commit --no-verify -m 'Example'",
      "url":"",
      "image":""
   },
   {
      "slno":"3.05",
      "topic":"notes",
      "description":"",
      "longDescription":"# Order<BR>$ git config branch.{branch_name}.description Remarks<BR><BR># Add remarks to hotfix/tip branch<BR>$ git config branch.hotfix/tip.description fix details",
      "url":"",
      "image":""
   },
   {
      "slno":"3.06",
      "topic":"restore",
      "description":"",
      "longDescription":"Restore operations are done via the git restore command.<BR><BR>git restore was introduced in 2.23 to separate git checkout / git reset responsibilities.<BR><BR># Undo workspace file modifications, excluding new files<BR>git restore README.md # a file<BR>git restore README.md README2.md # Multiple files<BR>git restore . # All current files<BR><BR># Return to the workspace from the staging area<BR>git restore --staged README.md",
      "url":"",
      "image":""
   },
   {
      "slno":"3.07",
      "topic":"reset",
      "description":"",
      "longDescription":"git reset command usage:<BR><BR># Roll back the previous version<BR>git reset --hard HEAD^<BR><BR># Roll back the last two versions<BR>git reset --hard HEAD^^<BR><BR># Roll back to the specified commit_id and view it through git log<BR>git reset --hard 'commit id'<BR><BR># After rolling back but not pushing to the remote, you can disconnect the current operation and perform the pull:<BR>git pull<BR><BR># push<BR>git push -f",
      "url":"",
      "image":""
   },
   {
      "slno":"3.08",
      "topic":"rm",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"3.09",
      "topic":"mv",
      "description":"",
      "longDescription":"The git mv command is used to rename files or move files. Most developers choose to move files manually. There is a difference between manual and git mv.<BR><BR>Difference between manual and command (assuming README.md is renamed to README2.md):<BR><BR>Manual: delete README.md first, then create README2.md, history cannot be tracked normally<BR>git mv: actually update the index and rename the file, which can be easily retrieved through history<BR>git mv is very similar to the uninx mv command, if you are familiar with it.<BR><BR>Note: git mv is not supported for newly created files and must be committed first.<BR><BR># rename 1.txt to 2.txt<BR>git mv 1.txt 2.txt<BR><BR># Force 1.txt to be renamed to 2.txt, regardless of whether the 2.txt file exists or not<BR>git mv -f 1.txt 2.txt<BR><BR># The same goes for moving directories<BR>git mv temp temp2",
      "url":"",
      "image":""
   },
   {
      "slno":"4",
      "topic":"Branching and Merging",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"4.01",
      "topic":"branch",
      "description":"",
      "longDescription":"# view all branches<BR>git branch -a<BR><BR># View local branch<BR>git branch<BR><BR># View remote branches<BR>git branch -r<BR><BR># View the remote branch associated with the local branch<BR>git branch -vv<BR><BR># View the creation time of the local master branch<BR>git reflog show --date=iso master<BR><BR># Search branches, searched with grep command, contains keyword dev<BR>git branch -a | grep dev ",
      "url":"",
      "image":""
   },
   {
      "slno":"4.02",
      "topic":"checkout",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"4.03",
      "topic":"switch",
      "description":"",
      "longDescription":"# switch to master branch<BR>git checkout master<BR><BR># switch to the previous branch<BR>git checkout -<BR><BR># Force switch, but be careful, if the file is not saved, the changes will be overwritten directly<BR>git checkout -f master<BR><BR># -t, switch remote branches, if you use git remote to add a new repository, you need to use -t to switch<BR>git checkout -t upstream/main <br> <br> # switch to develop branch<BR>git switch develop<BR><BR># switch to the previous branch<BR>git switch -<BR><BR># Force switch to develop branch and discard all local changes<BR>git switch -f develop<BR><BR># create branch and switch<BR>git switch -c newBranch<BR><BR># Force the creation of a branch<BR>git switch -C newBranch<BR><BR># Create a new branch from the previous 3 commits<BR>git switch -c newBranch HEAD~3<BR><BR># -t, switch remote branches, if you use git remote to add a new repository, you need to use -t to switch<BR>git switch -t upstream/main",
      "url":"",
      "image":""
   },
   {
      "slno":"4.04",
      "topic":"merge",
      "description":"",
      "longDescription":"merge<BR>feature/v1.0.0 branch code merged into develop<BR><BR>git checkout develop<BR>git merge feature/v1.0.0<BR>Merge the previous branch code into the current branch<BR><BR>git merge -<BR>Merge in silent mode, merge the develop branch into the current branch without outputting any information<BR><BR>git merge develop -q<BR>Merge without editing information, skip interaction<BR><BR>git merge develop --no-edit<BR>Do not commit after merging branch<BR><BR>git merge develop --no-commit<BR>Exit the merge and revert to the state before the merge<BR><BR>git merge --abort<BR>Merge a specified file or directory in a branch, it should be noted that this will directly overwrite the existing file, rather than essentially merging.<BR><BR># Merge the 2 files src/utils/http.js src/utils/load.js from the dev branch into the current branch<BR>git checkout dev src/utils/http.js src/utils/load.js",
      "url":"",
      "image":""
   },
   {
      "slno":"4.05",
      "topic":"mergetool",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"4.06",
      "topic":"log",
      "description":"",
      "longDescription":"# View full commit history<BR>git log<BR><BR># View the previous N commit records commit message<BR>git log -2<BR><BR># View the first N commit records, including diff<BR>git log -p -2<BR><BR># Search from commit, you can specify -i to ignore case<BR>git log -i --grep=fix: #28<BR><BR># Search from the working directory when the code containing alert(1) was introduced<BR>git log -S alert(1)<BR><BR># View the history of the specified author<BR>git log --author=userid<BR><BR># View a file's commit history<BR>git log README.md<BR><BR># only show merge logs<BR>git log --merges<BR><BR># View log records graphically, --oneline optional<BR>git log --graph --oneline<BR><BR># View history in reverse order<BR>git log --reverse<BR>git shortlog outputs the log in a short form, usually used to count the amount of code by contributors.<BR><BR># Defaults to grouping by contributors<BR>git shortlog<BR><BR># List the number of committers' code contributions, print the number of authors and contributions<BR>git shortlog -sn<BR><BR># Sort by number of commits and print out the message<BR>git shortlog -n<BR><BR># Use email format to view the contribution<BR>git shortlog -e",
      "url":"",
      "image":""
   },
   {
      "slno":"4.07",
      "topic":"stash",
      "description":"",
      "longDescription":"# Save the current modified workspace content<BR>git stash<BR><BR># Add comments when saving, this command is recommended<BR>git stash save Modified #28 bug<BR><BR># save files that contain untracked by git<BR>git stash -u<BR><BR># View the current save list<BR>git stash list<BR><BR># Restore the modified workspace content, it will be removed from the git stash list<BR>git stash pop # Restore the last saved content to the workspace, by default, the changes in the stash area will be restored to the workspace<BR>git stash pop stash@{1} # Restore the specified id, which can be found through git stash list<BR>git stash pop --index # Restore the last saved content to the workspace, but if the content of the temporary storage area is also restored to the temporary storage area<BR><BR># Same as the pop command, the only difference is that the save list is not removed<BR>git stash apply<BR><BR># clear all saves<BR>git stash clear<BR><BR># Clear the specified stash id, if the id is not specified after the drop, clear the most recent one<BR>git stash drop stash@{0}<BR>git stash drop # clear the last time",
      "url":"",
      "image":""
   },
   {
      "slno":"4.08",
      "topic":"tag",
      "description":"",
      "longDescription":"# List all local tags<BR>git tag<BR><BR># List all remote tags<BR>git ls-remote --tags origin<BR><BR># Find tags by specific pattern `*` template search<BR>git tag -l v1.0.0*<BR><BR># create labels with annotations<BR>git tag -a v1.1.0 -m tag description<BR><BR># Create lightweight tags without any parameters<BR>git tag v1.1.0<BR><BR># Tag later, if you forget to tag before, you can check the commit id through git log<BR>git log<BR>git tag -a v1.1.0 <commit_id><BR><BR># Push to the remote, the default is only created locally<BR>git push origin v1.1.0<BR><BR># Push all tags to remote at once<BR>git push origin --tags<BR><BR># To delete the tag, you need to run git push origin v1.1.0 again to delete the remote tag<BR>git tag -d v1.1.0<BR><BR># delete remote tag<BR>git push origin --delete v1.1.0<BR><BR># checkout tags<BR>git checkout v1.1.0<BR><BR># View the details of a local label<BR>git show v1.1.0",
      "url":"",
      "image":""
   },
   {
      "slno":"4.09",
      "topic":"worktree",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"5",
      "topic":"Sharing and Updating Projects",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"5.01",
      "topic":"fetch",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"5.02",
      "topic":"pull",
      "description":"",
      "longDescription":"git pull pulls the latest content and merges it.<BR><BR>Pull the latest content of the remote branch<BR>Pulls the current branch by default<BR><BR># Automatically merge if there is a conflict<BR>git pull<BR>Pull the specified branch<BR># remote branch name: local branch name<BR>git pull origin master:master<BR># If a remote branch is pulled and merged into the current branch, it can be omitted<BR>git pull origin master<BR>Pull the specified working directory<BR># By default, the pull will be in the current working directory, but if you want to pull the specified working directory, you can specify `-C`<BR>git -C /opt/work pull",
      "url":"",
      "image":""
   },
   {
      "slno":"5.03",
      "topic":"push",
      "description":"",
      "longDescription":"",
      "url":"",
      "image":""
   },
   {
      "slno":"5.04",
      "topic":"remote",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"5.05",
      "topic":"submodule",
      "description":"",
      "longDescription":"The role of git submodule submodule is similar to package management, similar to npm, mainly to reuse warehouses, but it is more convenient to use than package management.<BR><BR>Submodules do not need to create version branch management code, because it depends on the main application, so the version branch can be operated from the main application, then once a new version branch is created, all current content will be locked on this branch, regardless of submodules How to modify the warehouse.<BR><BR>Add submodules<BR>After adding submodules, you will find that there is a .gitmodules metadata file in the root directory, which is mainly used to manage submodules.<BR><BR>git submodule add https://github.com/userid/git-manual.git # Add to the current directory by default<BR>git submodule add https://github.com/userid/git-manual.git submodules/git-manual # Add to the specified directory<BR><BR># -b specifies a branch that needs to be added to the repository<BR>git submodule add -b develop https://github.com/userid/git-manual.git<BR>remove submodules<BR># 1. Directly delete the submodule directory<BR>rm -rf submodule<BR><BR># 2. Edit the .gitmodules file in the directory to delete the submodules that need to be deleted<BR><BR># Finally push directly<BR>git add -A<BR>git commit -m 'remove submodule'<BR>git push<BR>Clone a repository with submodules<BR># --recursive for recursive cloning, otherwise the submodule directory is empty<BR>git clone --recursive https://github.com/userid/git-manual.git<BR><BR># If you have cloned a project with submodules but forgot to --recursive, you can use this command to initialize, grab and checkout any nested submodules<BR>git submodule update --init --recursive<BR>Fix submodule branch<BR>When you clone a repository containing submodules, you will find that the submodule branch is wrong, you can use the following command to correct it:<BR><BR>git submodule foreach -q --recursive 'git checkout $(git config -f $toplevel/.gitmodules submodule.$name.branch || echo master)'<BR>Update submodule code<BR>Method 1: Usually we only need to execute git pull to update the code, which is a stupid way.<BR><BR># Recursively grab all changes in submodules, but do not update submodule contents<BR>git pull<BR><BR># At this time, you need to enter the submodule directory to update, so that a submodule update is completed, but if there are many submodules, it will be more troublesome<BR>cd git-manual && git pull<BR>Method 2: Use git submodule update to update submodules<BR><BR># git will try to update all submodules, if you only need to update a submodule just specify the submodule name after --remote<BR>git submodule update --remote<BR><BR># --recursive will recurse all submodules, including submodules in submodules<BR>git submodule update --init --recursive<BR>Method 3: Use git pull to update, this is a new update mode, which requires >= 2.14<BR><BR>git pull --recurse-submodules<BR>If you feel troublesome, you need to manually add --recurse-submodules every time you git pull, you can configure the default behavior of git pull, please refer to Configuration<BR><BR>For specific use, you can also see here git submodule submodule usage tutorial",
      "url":"",
      "image":""
   },
   {
      "slno":"6",
      "topic":"Inspection and Comparison",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"6.01",
      "topic":"show",
      "description":"",
      "longDescription":"You can view historical commit information with the git show command.<BR><BR># Do not specify parameters to view the latest information by default<BR>git show<BR><BR># Specify commit_id to view<BR>git show d68a1ef<BR><BR># You can also specify commit_id to view the commit information of the specified file<BR>git show d68a1ef README.md<BR><BR># Specify only the file name to view the commit information that contains this file in the last commit<BR>git show README.md<BR><BR># Specify the branch name to view the last commit information<BR>git show feature/dev",
      "url":"",
      "image":""
   },
   {
      "slno":"6.02",
      "topic":"log",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"6.03",
      "topic":"diff",
      "description":"",
      "longDescription":"The git diff command is used to view the differences between the contents of the workspace file and the staging area or remote.<BR><BR>git diff<BR># View all file differences between workspace and staging area<BR>git diff<BR><BR># View the difference between the specified file workspace and the staging area<BR>git diff README.md<BR><BR># View the content difference of the specified commit<BR>git diff dce06bd<BR><BR># Compare the difference between 2 commits<BR>git diff e3848eb dce06bd<BR><BR># Compare the difference between the latest submissions of the two branches, the develop branch and the master branch, if there is no difference, return empty<BR>git diff develop master<BR><BR># Compare the content differences of the specified files in the 2 branches, the differences between develop and master READNE.md files<BR>git diff develop master README.md README.md<BR><BR># View workspace conflict file differences<BR>git diff --name-only --diff-filter=U<BR><BR># See which files were last modified<BR>git diff --name-only HEAD~<BR>git diff --name-only HEAD~~ # The first 2 times...",
      "url":"",
      "image":""
   },
   {
      "slno":"6.04",
      "topic":"difftool",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"6.05",
      "topic":"range-diff",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"6.06",
      "topic":"shortlog",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"6.07",
      "topic":"describe",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"7",
      "topic":"Patching",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"7.01",
      "topic":"apply",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"7.02",
      "topic":"cherry-pick",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"7.03",
      "topic":"diff",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"7.04",
      "topic":"rebase",
      "description":"",
      "longDescription":"The git rebase command has two useful functions:<BR><BR>Combine multiple commit records into one<BR>instead of git mrege merge code<BR>1. Combine multiple commit records into one<BR>Pay attention to ensure that there is no content in the current workspace to operate.<BR><BR>Specify the record that needs to be operated, and then enter the interactive command<BR># start starting point is required, end is optional, defaults to the commit pointed to by the current branch HEAD<BR>git rebase -i <start> <end><BR><BR>git rebase -i HEAD~5 # Operate the last 5 commit records<BR>git rebase -i e88835de # or operate with commit_id",
      "url":"",
      "image":""
   },
   {
      "slno":"7.05",
      "topic":"revert",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"8",
      "topic":"Debugging",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"8.01",
      "topic":"bisect",
      "description":"",
      "longDescription":"# start<BR>git bisect start [end] [start] # Determine start and end by git log<BR>git bisect start HEAD 4d83cf<BR><BR># It is good to record this commit<BR>git bisect good<BR><BR># Record this commit is bad<BR>git bisect bad<BR><BR># quit<BR>git bisect reset",
      "url":"",
      "image":""
   },
   {
      "slno":"8.02",
      "topic":"blame",
      "description":"",
      "longDescription":"git blame means to blame, you know.<BR><BR>git blame is used to view the modification history of a file by which author made the changes.<BR><BR># View the modification history of the README.md file, including time, author, and content<BR>git blame README.md<BR><BR># See who changed lines 11-12 of the README.md file<BR>git blame -L 11,12 README.md<BR>git blame -L 11 README.md # Look after line 11<BR><BR># show the full hash value<BR>git blame -l README.md<BR><BR># Display the number of modified lines<BR>git blame -n README.md<BR><BR># show author email<BR>git blame -e README.md<BR><BR># Do a combined query on the parameters<BR>git blame -enl -L 11 README.md",
      "url":"",
      "image":""
   },
   {
      "slno":"8.03",
      "topic":"grep",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9",
      "topic":"Guides",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.01",
      "topic":"gitattributes",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.02",
      "topic":"Command-line interface conventions",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.03",
      "topic":"Everyday Git",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.04",
      "topic":"Frequently Asked Questions (FAQ)",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.05",
      "topic":"Glossary",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.06",
      "topic":"Hooks",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.07",
      "topic":"gitignore",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.08",
      "topic":"gitmodules",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.09",
      "topic":"Revisions",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.1",
      "topic":"Submodules",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.11",
      "topic":"Tutorial",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"9.12",
      "topic":"Workflows",
      "description":"",
      "longDescription":"Git Flow is a set of git-based workflows that define a strict model for how to create branches around project releases.<BR><BR>git flow just simplifies the operation commands, you can do it without git flow, just follow the git flow process operation, and the same is true for manual command execution.<BR><BR>git flow is not a built-in command and needs to be installed separately.<BR><BR>Initialize<BR>Each repository must be initialized once before it can be used, which is for the current user.<BR><BR># Usually just press Enter to complete the default settings<BR>git flow init<BR>Start developing a feature<BR>Suppose we want to start developing a new feature such as login and registration. At this time, we need to open a feature branch for independent development.<BR><BR># Step 1: Enable new features, create a branch named v1.1.0, and create a branch named feature/v1.1.0<BR>git flow feature start v1.1.0<BR><BR># Step 2: Push the branch to the remote, this step is indispensable in team collaboration<BR>git flow feature publish v1.1.0<BR><BR># Finally: complete the feature, merge the current branch into the develop branch and delete the feature/v1.1.0 branch and go back to develop<BR>git flow feature finish v1.1.0<BR>Patch<BR>When do you need to patch? Assuming that the functions that have been launched have bugs that need to be fixed, they need to be patched.<BR><BR>A hotfix is â€‹â€‹a patch for the master branch.<BR><BR># Step 1: Open a patch branch called fix_doc to modify document errors, and the branch name after establishment is hotfix/fix_doc<BR>git flow hotfix start fix_doc<BR><BR># Step 2: Push to the remote, or not push, if multiple people change the bug at the same time, they need to push the shared branch<BR>git flow hotfix publish fix_doc<BR><BR># Finally: finish patch, merge current branch into master and develop, then delete branch and go back to develop<BR>git flow hotfix finish fix_doc<BR>Post<BR>Assuming that the product has given a new requirement and completed, you can choose to release it at this time. Itâ€™s okay to not release it, but there will be version distinctions after release, and itâ€™s very convenient to find the code of a certain version in the future.<BR><BR># Step 1: Create a release version v1.1.0 The branch is named release/v1.1.0<BR>git flow release start v1.1.0<BR><BR># Step 2: Push to remote, optional<BR>git flow release publish v1.1.0<BR><BR># Finally: merge the current branch into master and develop, add a tag, then delete the current branch and go back to develop<BR>git flow release finish v1.1.0<BR>refer to:<BR><BR>https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow<BR>[https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow](https://www.git-tower.com/learn/git /ebook/cn/command-line/advanced-topics/git-flow)",
      "url":"",
      "image":""
   },
   {
      "slno":"9.13",
      "topic":"All guides...",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"10",
      "topic":"Email",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"10.01",
      "topic":"am",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"10.02",
      "topic":"apply",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"10.03",
      "topic":"format-patch",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"10.04",
      "topic":"send-email",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"10.05",
      "topic":"request-pull",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"11",
      "topic":"External Systems",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"11.01",
      "topic":"svn",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"11.02",
      "topic":"fast-import",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12",
      "topic":"Administration",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12.01",
      "topic":"clean",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12.02",
      "topic":"gc",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12.03",
      "topic":"fsck",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12.04",
      "topic":"reflog",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12.05",
      "topic":"filter-branch",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12.06",
      "topic":"instaweb",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"12.07",
      "topic":"archive",
      "description":"",
      "longDescription":"",
      "url":"",
      "image":""
   },
   {
      "slno":"12.08",
      "topic":"bundle",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"13",
      "topic":"Server Admin",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"13.01",
      "topic":"daemon",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"13.02",
      "topic":"update-server-info",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14",
      "topic":"Plumbing Commands",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.01",
      "topic":"cat-file",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.02",
      "topic":"check-ignore",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.03",
      "topic":"checkout-index",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.04",
      "topic":"commit-tree",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.05",
      "topic":"count-objects",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.06",
      "topic":"diff-index",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.07",
      "topic":"for-each-ref",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.08",
      "topic":"hash-object",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"14.09",
      "topic":"ls-files",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15",
      "topic":"ls-tree",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.01",
      "topic":"merge-base",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.02",
      "topic":"read-tree",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.03",
      "topic":"rev-list",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.04",
      "topic":"rev-parse",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.05",
      "topic":"show-ref",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.06",
      "topic":"symbolic-ref",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.07",
      "topic":"update-index",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.08",
      "topic":"update-ref",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.09",
      "topic":"verify-pack",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   },
   {
      "slno":"15.1",
      "topic":"write-tree",
      "description":"",
      "longDescription":"Description for above topic goes here",
      "url":"",
      "image":""
   }
]
