---> Python basics
===> Python
# Reference:
- https://www.geeksforgeeks.org/python-programming-examples/
- https://www.geeksforgeeks.org/python-exercises-practice-questions-and-solutions/?ref=lbp
- https://www.w3schools.com/python/python_examples.asp

@Syntax
~~~
#This is a comment.
"""This is a
multiline docstring."""
print("Hello, World!")
~~~
@variables
~~~
x = 5
y = "John"
print(x)
print(y)

a = "Python"
b = "is"
c = "awesome"
print(a, b, c)


p = "Python "
q = "is "
r = "awesome"
print(p + q + r)

~~~
@Numbers
~~~
x = 1
y = 2.8
z = 1j

print(type(x))
print(type(y))
print(type(z))

a = 1
b = 35656222554887711
c = -3255522

print(type(a))
print(type(b))
print(type(c))

p = 1.10
q = 1.0
r = -35.59

print(type(p))
print(type(q))
print(type(r))

t = 35e3
u = 12E4
v = -87.7e100

print(type(t))
print(type(u))
print(type(v))

d = 3+5j
e = 5j
f = -5j

print(type(d))
print(type(e))
print(type(f))
~~~

@Casting
~~~
x = int(1)
y = int(2.8)
z = int("3")
print(x)
print(y)
print(z)


a = float(1)
b = float(2.8)
c = float("3")
d = float("4.2")
print(a)
print(b)
print(c)
print(d)


p = str("s1")
q = str(2)
r = str(3.0)
print(p)
print(q)
print(r)

~~~

@Strings
~~~
a = " Hello, World! "
print(a.strip())

b = "Hello, World!"
print(b[2:5])

print(len(a))

print(a.lower())

print(a.upper())

print(a.replace("H", "J"))

p = "Hello, World!"
q = p.split(",")
print(q)
~~~

@Operators
~~~
x = 5
y = 3

print(x + y)

print(x - y)

print(x * y)

print(x / y)

print(x % y)

print(x)

~~~

@Lists
~~~
thislist = ["apple", "banana", "cherry"]
print(thislist)

print(thislist[1])

thislist[1] = "blackcurrant"

print(thislist)

for x in thislist:
  print(x)

if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")
  
print(len(thislist))

thislist.append("orange")

print(thislist)

thislist.insert(1, "orange")
print(thislist)

thislist.remove("banana")
print(thislist)

thislist.pop()
print(thislist)

del thislist[0]
print(thislist)

thislist.clear()
print(thislist)

thislist = list(("apple", "banana", "cherry"))
print(thislist)

~~~

@Tuples
~~~
thistuple = ("apple", "banana", "cherry")
print(thistuple)

print(thistuple[1])

thistuple[1] = "blackcurrant"

# the value is still the same:
print(thistuple)

for x in thistuple:
  print(x)

if "apple" in thistuple:
  print("Yes, 'apple' is in the fruits tuple")

print(len(thistuple))

del thistuple
print(thistuple) #this will raise an error because the tuple no longer exists

thistuple = tuple(("apple", "banana", "cherry"))
print(thistuple)



~~~

@Sets
~~~
thisset = {"apple", "banana", "cherry"}
print(thisset)

# Note: the set list is unordered, meaning: the items will appear in a random order.

# Refresh this page to see the change in the result.

for x in thisset:
  print(x)
  
print("banana" in thisset)

thisset.add("orange")

print(thisset)

thisset.update(["orange", "mango", "grapes"])

print(thisset)

print(len(thisset))

thisset.remove("banana")

print(thisset)

thisset.discard("banana")

print(thisset)

x = thisset.pop()

print(x) #removed item

print(thisset) #the set after removal

thisset.clear()

print(thisset)

del thisset

print(thisset) #this will raise an error because the set no longer exists

print(thisset)
# Note: the set list is unordered, so the result will display the items in a random order.



~~~

@Dictionaries
~~~
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

x = thisdict["model"]
print(x)

thisdict["year"] = 2018

print(thisdict)


for x in thisdict:
  print(x)

for x in thisdict:
  print(thisdict[x])

for x in thisdict.values():
  print(x)

for x, y in thisdict.items():
  print(x, y)

if "model" in thisdict:
  print("Yes, 'model' is one of the keys in the thisdict dictionary")
  
print(len(thisdict))

thisdict["color"] = "red"
print(thisdict)

thisdict.pop("model")
print(thisdict)

thisdict.clear()
print(thisdict)

thisdict = dict(brand="Ford", model="Mustang", year=1964)
# note that keywords are not string literals
# note the use of equals rather than colon for the assignment
print(thisdict)
~~~

@if-else
~~~
a = 33
b = 200

if b > a:
  print("b is greater than a")
  
  
a = 33
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
  
a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

a = 200
b = 33

if a > b: print("a is greater than b")

a = 2
b = 330

print("A") if a > b else print("B")

a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")
  
a = 200
b = 33
c = 500
if a > b or a > c:
  print("At least one of the conditions is True")

~~~

@while-loop
~~~
i = 1
while i < 6:
  print(i)
  i += 1

i = 1
while i < 6:
  print(i)
  if (i == 3):
    break
  i += 1

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

# Note that number 3 is missing in the result




~~~

@for-loop
~~~
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  
for x in "banana":
  print(x) 

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x) 
  if x == "banana":
    break

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x) 

for x in range(6):
  print(x) 


for x in range(6):
  print(x)
else:
  print("Finally finished!")

adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
  for y in fruits:
    print(x, y)

~~~

@functions
~~~
def my_function():
  print("Hello from a function")

my_function()

def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")

def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")


def my_function(x):
  return 5 * x

print(my_function(3))
print(my_function(5))
print(my_function(9))

def tri_recursion(k):
  if(k > 0):
    result = k + tri_recursion(k - 1)
    print(result)
  else:
    result = 0
  return result

print("\n\nRecursion Example Results")
tri_recursion(6)

~~~

@lambda
~~~
x = lambda a: a + 10
print(x(5))

x = lambda a, b: a * b
print(x(5, 6))

x = lambda a, b, c: a + b + c
print(x(5, 6, 2))



~~~

@Arrays
~~~
cars = ["Ford", "Volvo", "BMW"]

print(cars)

cars = ["Ford", "Volvo", "BMW"]

x = cars[0]

print(x)

cars = ["Ford", "Volvo", "BMW"]

cars[0] = "Toyota"

print(cars)

cars = ["Ford", "Volvo", "BMW"]

x = len(cars)

print(x)

cars = ["Ford", "Volvo", "BMW"]

for x in cars:
  print(x)


cars = ["Ford", "Volvo", "BMW"]

cars.append("Honda")

print(cars)


cars = ["Ford", "Volvo", "BMW"]

cars.pop(1)

print(cars)

~~~

@classes and objects
~~~
class MyClass:
  x = 5

print(MyClass)

class MyClass:
  x = 5

p1 = MyClass()
print(p1.x)


class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)


class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc()


class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()


class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

p1.age = 40

print(p1.age)


class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

del p1.age

print(p1.age)


class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

del p1

print(p1)


~~~

@Iterators
~~~
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))


mystr = "banana"
myit = iter(mystr)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))


mytuple = ("apple", "banana", "cherry")

for x in mytuple:
  print(x)



class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))




class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)


~~~

@Modules
~~~
import mymodule

mymodule.greeting("Jonathan")


import mymodule

a = mymodule.person1["age"]
print(a)


import mymodule as mx

a = mx.person1["age"]
print(a)


import platform

x = platform.system()
print(x)


import platform

x = dir(platform)
print(x)


from mymodule import person1

print(person1["age"])


~~~

@Dates
~~~
import datetime

x = datetime.datetime.now()

print(x)

import datetime

x = datetime.datetime.now()

print(x.year)
print(x.strftime("%A"))


import datetime

x = datetime.datetime(2020, 5, 17)

print(x)


import datetime

x = datetime.datetime(2018, 6, 1)

print(x.strftime("%B"))

~~~

@Math
~~~
x = min(5, 10, 25)
y = max(5, 10, 25)

print(x)
print(y)




x = abs(-7.25)

print(x)



x = pow(4, 3)

print(x)


import math

x = math.sqrt(64)

print(x)


#Import math library
import math

#Round a number upward to its nearest integer
x = math.ceil(1.4)

#Round a number downward to its nearest integer
y = math.floor(1.4)

print(x)
print(y)


import math

x = math.pi

print(x)


~~~

@Json
~~~
import json

# some JSON:
x = '{ "name":"John", "age":30, "city":"New York"}'

# parse x:
y = json.loads(x)

# the result is a Python dictionary:
print(y["age"])




import json

# a Python object (dict):
x = {
  "name": "John",
  "age": 30,
  "city": "New York"
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)


import json

print(json.dumps({"name": "John", "age": 30}))
print(json.dumps(["apple", "bananas"]))
print(json.dumps(("apple", "bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))


import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)


import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}

# use four indents to make it easier to read the result:
print(json.dumps(x, indent=4))


import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}

# use . and a space to separate objects, and a space, a = and a space to separate keys from their values:
print(json.dumps(x, indent=4, separators=(". ", " = ")))


import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}

# sort the result alphabetically by keys:
print(json.dumps(x, indent=4, sort_keys=True))




~~~

@Regex
~~~
import re

#Check if the string starts with "The" and ends with "Spain":

txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

if x:
  print("YES! We have a match!")
else:
  print("No match")
  
  
import re

#Return a list containing every occurrence of "ai":

txt = "The rain in Spain"
x = re.findall("ai", txt)
print(x)


import re

txt = "The rain in Spain"
x = re.search("\s", txt)

print("The first white-space character is located in position:", x.start()) 


import re

#Split the string at every white-space character:

txt = "The rain in Spain"
x = re.split("\s", txt)
print(x)


import re

#Replace all white-space characters with the digit "9":

txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)




~~~

@PIP
~~~
import camelcase

c = camelcase.CamelCase()

txt = "lorem ipsum dolor sit amet"

print(c.hump(txt))

#This method capitalizes the first letter of each word.
~~~

@TryExcept
~~~
#The try block will generate an error, because x is not defined:

try:
  print(x)
except:
  print("An exception occurred")



#The try block will generate a NameError, because x is not defined:

try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")


#The try block does not raise any errors, so the else block is executed:

try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")


#The finally block gets executed no matter if the try block raises any errors or not:

try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")


~~~

@Filehandling
~~~
f = open("demofile.txt", "r")

print(f.read())


f = open("demofile.txt", "r")

print(f.read(5))

f = open("demofile.txt", "r")

print(f.readline())


f = open("demofile.txt", "r")
for x in f:
  print(x)


~~~

@Mysql
~~~

~~~

@MongoDB
~~~

~~~
